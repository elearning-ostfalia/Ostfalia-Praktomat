# Generated by Django 2.2.7 on 2019-11-27 12:14

import checker.basemodels
import checker.checker.DejaGnu
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('solutions', '0005_auto_20190408_1427'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('tasks', '0009_task_proformatask_hash'),
    ]

    operations = [
        migrations.CreateModel(
            name='CheckerResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('passed', models.BooleanField(default=True, help_text='Indicates whether the test has been passed')),
                ('log', models.TextField(help_text='Text result of the checker')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('runtime', models.IntegerField(default=0, help_text='Runtime in milliseconds')),
                ('internal_error', models.BooleanField(default=False, help_text='Indicates whether an error occured during test exceution')),
                ('log_format', models.CharField(choices=[('0', 'Checker_Log'), ('1', 'Proforma_Subtests')], default='0', max_length=2)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('solution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solutions.Solution')),
            ],
        ),
        migrations.CreateModel(
            name='CreateFileChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('file', checker.basemodels.CheckerFileField(help_text='The file that is copied into the sandbox', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path)),
                ('filename', models.CharField(blank=True, help_text='What the file will be named in the sandbox. If empty, we try to guess the right filename!', max_length=500)),
                ('path', models.CharField(blank=True, help_text='Subfolder in the sandbox which shall contain the file.', max_length=500)),
                ('unpack_zipfile', models.BooleanField(default=False, help_text='Unpack the zip file into the given subfolder. (It will be an error if the file is not a zip file; the filename is ignored.)')),
                ('is_sourcecode', models.BooleanField(default=False, help_text='The file is (or, if it is a zipfile to be unpacked: contains) source code')),
                ('include_in_solution_download', models.BooleanField(default=True, help_text='The file is (or, if it is a zipfile to be unpacked: its content) is included in "full" solution download .zip files')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProFormAChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('proforma_id', models.CharField(default='None', help_text='Is needed for ProFormA', max_length=255)),
                ('files', models.ManyToManyField(help_text='Files needed to run the test', to='checker.CreateFileChecker')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CBuilder',
            fields=[
                ('proformachecker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.ProFormAChecker')),
                ('_flags', models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000)),
                ('_output_flags', models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000)),
                ('_libs', models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000)),
                ('_file_pattern', models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000)),
                ('_main_required', models.BooleanField(default=True, help_text='Is a submission required to provide a main method?')),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.proformachecker',),
        ),
        migrations.CreateModel(
            name='CheckStyleChecker',
            fields=[
                ('proformachecker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.ProFormAChecker')),
                ('name', models.CharField(default='CheckStyle', help_text='Name to be displayed on the solution detail page.', max_length=100)),
                ('configuration', checker.basemodels.CheckerFileField(help_text='XML configuration of CheckStyle. See http://checkstyle.sourceforge.net/', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path)),
                ('allowedWarnings', models.IntegerField(default=0, help_text='How many warnings are allowed before the checker is not passed')),
                ('allowedErrors', models.IntegerField(default=0, help_text='How many errors are allowed before the checker is not passed')),
                ('regText', models.CharField(default='.*', help_text='Regular expression describing files to be analysed.', max_length=5000)),
                ('check_version', models.CharField(choices=[('check-6.2', 'Checkstyle 6.2 all'), ('check-7.6', 'Checkstyle 7.6 all'), ('check-8.23', 'Checkstyle 8.23 all')], default='check-8.23', max_length=16)),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.proformachecker',),
        ),
        migrations.CreateModel(
            name='CXXBuilder',
            fields=[
                ('proformachecker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.ProFormAChecker')),
                ('_flags', models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000)),
                ('_output_flags', models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000)),
                ('_libs', models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000)),
                ('_file_pattern', models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000)),
                ('_main_required', models.BooleanField(default=True, help_text='Is a submission required to provide a main method?')),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.proformachecker',),
        ),
        migrations.CreateModel(
            name='FortranBuilder',
            fields=[
                ('proformachecker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.ProFormAChecker')),
                ('_flags', models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000)),
                ('_output_flags', models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000)),
                ('_libs', models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000)),
                ('_file_pattern', models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000)),
                ('_main_required', models.BooleanField(default=True, help_text='Is a submission required to provide a main method?')),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.proformachecker',),
        ),
        migrations.CreateModel(
            name='HaskellBuilder',
            fields=[
                ('proformachecker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.ProFormAChecker')),
                ('_flags', models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000)),
                ('_output_flags', models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000)),
                ('_libs', models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000)),
                ('_file_pattern', models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000)),
                ('_main_required', models.BooleanField(default=True, help_text='Is a submission required to provide a main method?')),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.proformachecker',),
        ),
        migrations.CreateModel(
            name='JavaBuilder',
            fields=[
                ('proformachecker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.ProFormAChecker')),
                ('_flags', models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000)),
                ('_output_flags', models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000)),
                ('_libs', models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000)),
                ('_file_pattern', models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000)),
                ('_main_required', models.BooleanField(default=True, help_text='Is a submission required to provide a main method?')),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.proformachecker',),
        ),
        migrations.CreateModel(
            name='JavaGCCBuilder',
            fields=[
                ('proformachecker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.ProFormAChecker')),
                ('_flags', models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000)),
                ('_output_flags', models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000)),
                ('_libs', models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000)),
                ('_file_pattern', models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000)),
                ('_main_required', models.BooleanField(default=True, help_text='Is a submission required to provide a main method?')),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.proformachecker',),
        ),
        migrations.CreateModel(
            name='JUnitChecker',
            fields=[
                ('proformachecker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.ProFormAChecker')),
                ('class_name', models.CharField(help_text='The fully qualified name of the test case class (without .class)', max_length=100)),
                ('test_description', models.TextField(help_text='Description of the Testcase. To be displayed on Checker Results page when checker is  unfolded.')),
                ('name', models.CharField(help_text='Name of the Testcase. To be displayed as title on Checker Results page', max_length=100)),
                ('ignore', models.CharField(blank=True, default='', help_text='space-separated list of files to be ignored during compilation, i.e.: these files will not be compiled.', max_length=4096)),
                ('junit_version', models.CharField(choices=[('junit4', 'JUnit 4'), ('junit4.10', 'JUnit 4.10'), ('junit4.12', 'JUnit 4.12'), ('junit4.12-gruendel', 'JUnit 4.12 with Gruendel Addon'), ('junit3', 'JUnit 3')], default='junit3', max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.proformachecker',),
        ),
        migrations.CreateModel(
            name='PythonChecker',
            fields=[
                ('proformachecker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.ProFormAChecker')),
                ('name', models.CharField(default='Externen Tutor ausführen', help_text='Name to be displayed on the solution detail page.', max_length=100)),
                ('doctest', checker.basemodels.CheckerFileField(help_text='The doctest script.', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path)),
                ('remove', models.CharField(blank=True, help_text='Regular expression describing passages to be removed from the output.', max_length=5000)),
                ('returns_html', models.BooleanField(default=False, help_text="If the script doesn't return HTML it will be enclosed in &lt; pre &gt; tags.")),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.proformachecker',),
        ),
        migrations.CreateModel(
            name='ScalaBuilder',
            fields=[
                ('proformachecker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.ProFormAChecker')),
                ('_flags', models.CharField(blank=True, default='-Wall', help_text='Compiler flags', max_length=1000)),
                ('_output_flags', models.CharField(blank=True, default='-o %s', help_text="Output flags. '%s' will be replaced by the program name.", max_length=1000)),
                ('_libs', models.CharField(blank=True, default='', help_text='Compiler libraries', max_length=1000)),
                ('_file_pattern', models.CharField(default='^[a-zA-Z0-9_]*$', help_text='Regular expression describing all source files to be passed to the compiler.', max_length=1000)),
                ('_main_required', models.BooleanField(default=True, help_text='Is a submission required to provide a main method?')),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.proformachecker',),
        ),
        migrations.CreateModel(
            name='SetlXChecker',
            fields=[
                ('proformachecker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.ProFormAChecker')),
                ('name', models.CharField(default='SetlXChecker', help_text='Name to be displayed on the solution detail page.', max_length=100)),
                ('testFile', checker.basemodels.CheckerFileField(help_text='Test File which is appended to the submission', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path)),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.proformachecker',),
        ),
        migrations.CreateModel(
            name='TextChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('text', models.TextField()),
                ('choices', models.IntegerField(choices=[(0, 'The text must not be in the solution'), (1, 'The text has to be in the solution')], default=1, verbose_name='Select:')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ScriptChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('name', models.CharField(default='Externen Tutor ausführen', help_text='Name to be displayed on the solution detail page.', max_length=100)),
                ('filename', models.CharField(blank=True, help_text='What the file will be named in the sandbox. If empty, we try to guess the right filename!', max_length=500)),
                ('shell_script', checker.basemodels.CheckerFileField(help_text='A script (e.g. a shell script) to run. Its output will be displayed to the user (if public), the checker will succeed if it returns an exit code of 0. The environment will contain the variables JAVA and PROGRAM.', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path)),
                ('remove', models.CharField(blank=True, help_text='Regular expression describing passages to be removed from the output.', max_length=5000)),
                ('returns_html', models.BooleanField(default=False, help_text="If the script doesn't return HTML it will be enclosed in &lt; pre &gt; tags.")),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('r_script', models.CharField(blank=True, help_text='R script to execute. If left blank, it will run any *.R file, as long as there is only one.', max_length=100)),
                ('require_plots', models.BooleanField(default=False, help_text='Require the script to create an Rplots.pdf file.')),
                ('keep_plots', models.BooleanField(default=True, help_text='If the R script creates a Rplots.pdf file, keep it.')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LineWidthChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('max_line_length', models.IntegerField(default=80, help_text='The maximum length of a line of code.')),
                ('tab_width', models.IntegerField(default=4, help_text='The amount of characters a tab represents.')),
                ('include', models.CharField(blank=True, default='.*', help_text='Regular expression describing the filenames to be checked. Case insensitive. Blank: use all files.', max_length=100)),
                ('exclude', models.CharField(blank=True, default='.*\\.txt$', help_text='Regular expression describing included filenames, which shall be excluded. Case insensitive. Blank: use all files.', max_length=100)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LineCounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KeepFileChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('filename', models.CharField(blank=True, help_text='The name of the file to preserve (e.g. out.txt)', max_length=500)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IsabelleChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('logic', models.CharField(default='HOL', help_text='Default heap to use', max_length=100)),
                ('additional_theories', models.CharField(blank=True, help_text='Isabelle theories to be run in addition to those provided by the user (Library theories or theories uploaded using the Create File Checker). Do not include the file extensions. Separate multiple theories by space', max_length=200)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InterfaceChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('interface1', models.CharField(help_text='The name of the interface that must be implemented.', max_length=100)),
                ('interface2', models.CharField(blank=True, help_text='The name of the interface that must be implemented.', max_length=100)),
                ('interface3', models.CharField(blank=True, help_text='The name of the interface that must be implemented.', max_length=100)),
                ('interface4', models.CharField(blank=True, help_text='The name of the interface that must be implemented.', max_length=100)),
                ('interface5', models.CharField(blank=True, help_text='The name of the interface that must be implemented.', max_length=100)),
                ('interface6', models.CharField(blank=True, help_text='The name of the interface that must be implemented.', max_length=100)),
                ('interface7', models.CharField(blank=True, help_text='The name of the interface that must be implemented.', max_length=100)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HaskellTestFrameWorkChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('file', checker.basemodels.CheckerFileField(help_text='The file that is copied into the sandbox', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path)),
                ('filename', models.CharField(blank=True, help_text='What the file will be named in the sandbox. If empty, we try to guess the right filename!', max_length=500)),
                ('path', models.CharField(blank=True, help_text='Subfolder in the sandbox which shall contain the file.', max_length=500)),
                ('unpack_zipfile', models.BooleanField(default=False, help_text='Unpack the zip file into the given subfolder. (It will be an error if the file is not a zip file; the filename is ignored.)')),
                ('is_sourcecode', models.BooleanField(default=False, help_text='The file is (or, if it is a zipfile to be unpacked: contains) source code')),
                ('include_in_solution_download', models.BooleanField(default=True, help_text='The file is (or, if it is a zipfile to be unpacked: its content) is included in "full" solution download .zip files')),
                ('test_description', models.TextField(help_text='Description of the Testcase. To be displayed on Checker Results page when checker is unfolded.')),
                ('name', models.CharField(help_text='Name of the Testcase. To be displayed as title on Checker Results page', max_length=100)),
                ('ignore', models.CharField(blank=True, default='', help_text='space-separated list of files to be ignored during compilation', max_length=4096)),
                ('require_safe', models.BooleanField(default=True, help_text='Is a submission required to be Safe (according to GHCs Safe-Mode)?')),
                ('include_testcase_in_report', models.CharField(choices=[('DL', 'Download-Link only'), ('NO', 'Do not make the testcases source available'), ('FULL', 'Also copy the source into the report')], default='DL', help_text='Make the testcases source available via the checkers result report?', max_length=4)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DejaGnuTester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('name', models.CharField(help_text='The name of the Test', max_length=100)),
                ('test_case', checker.basemodels.CheckerFileField(help_text='In den folgenden DejaGnu-Testfällen werden typischerweise Funktionen aufgerufen, die beim vorherigen Schritt <EM>Tests einrichten</EM> definiert wurden.     Siehe    auch den Abschnitt <EM>How to write a test case</EM> im <A TARGET="_blank" HREF="http://www.gnu.org/manual/dejagnu/">DejaGnu-Handbuch</A>.', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, checker.checker.DejaGnu.DejaGnu),
        ),
        migrations.CreateModel(
            name='DejaGnuSetup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('test_defs', checker.basemodels.CheckerFileField(help_text='Das Setup benutzt den <A HREF="http://www.gnu.org/software/dejagnu/dejagnu.html">DejaGnu-Testrahmen</A>, um die Programme zu testen. Die in dieser Datei enthaltenen Definitionen gelten für alle Testfälle dieser Aufgabe. Sie werden beim Testen in die DejaGnu-Datei <TT>default.exp</TT> geschrieben. (Vergl. hierzuden Abschnitt <EM>Target dependent procedures</EM> im    <A HREF="http://www.gnu.org/manual/dejagnu/" TARGET="_blank">DejaGnu-Handbuch</A>.) Die Variablen PROGRAM und JAVA werden mit dem Programmnamen bzw. dem Pfad zur Java-Runtime ersetzt.', max_length=500, upload_to=checker.basemodels.get_checkerfile_storage_path)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, checker.checker.DejaGnu.DejaGnu),
        ),
        migrations.CreateModel(
            name='CheckerResultArtefact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=128)),
                ('file', models.FileField(help_text='Artefact produced by a checker', max_length=500, upload_to=checker.basemodels.get_checkerresultartefact_upload_path)),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artefacts', to='checker.CheckerResult')),
            ],
        ),
        migrations.CreateModel(
            name='AnonymityChecker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(help_text='Determines the order in which the checker will start. Not necessary continuously!')),
                ('public', models.BooleanField(default=True, help_text='Test results are displayed to the submitter.')),
                ('required', models.BooleanField(default=False, help_text='The test must be passed to submit the solution.')),
                ('always', models.BooleanField(default=True, help_text='The test will run on submission time.')),
                ('critical', models.BooleanField(default=False, help_text='If this test fails, do not display further test results.')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IgnoringHaskellBuilder',
            fields=[
                ('haskellbuilder_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.HaskellBuilder')),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.haskellbuilder',),
        ),
        migrations.CreateModel(
            name='IgnoringJavaBuilder',
            fields=[
                ('javabuilder_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.JavaBuilder')),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.javabuilder',),
        ),
        migrations.CreateModel(
            name='TestOnlyBuildingBuilder',
            fields=[
                ('haskellbuilder_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='checker.HaskellBuilder')),
            ],
            options={
                'abstract': False,
            },
            bases=('checker.haskellbuilder',),
        ),
    ]
